#!/usr/bin/env python3
"""
6GV6 Metalloprotein Visualization Script
Generated by Metalloprotein Binding Efficiency Prediction Pipeline
"""

import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path

# Load results
results_dir = Path("6gv6_results")

# Create visualization
fig, axes = plt.subplots(2, 2, figsize=(15, 12))

# 1. Binding efficiency by metal ion
if (results_dir / "binding_efficiency.json").exists():
    import json
    with open(results_dir / "binding_efficiency.json", 'r') as f:
        efficiency_data = json.load(f)
    
    ions = list(efficiency_data['ion_efficiencies'].keys())
    efficiencies = list(efficiency_data['ion_efficiencies'].values())
    
    axes[0, 0].bar(ions, efficiencies, color=['blue', 'green', 'red', 'orange'])
    axes[0, 0].set_ylabel('Binding Efficiency')
    axes[0, 0].set_title('Metal Ion Binding Efficiency')
    axes[0, 0].grid(True, alpha=0.3)

# 2. Brownian motion results
if (results_dir / "brownian_motion.json").exists():
    with open(results_dir / "brownian_motion.json", 'r') as f:
        brownian_data = json.load(f)
    
    ions = list(brownian_data['diffusion_coefficients'].keys())
    diffusion_coeffs = list(brownian_data['diffusion_coefficients'].values())
    
    axes[0, 1].bar(ions, diffusion_coeffs, color=['purple', 'brown', 'pink', 'gray'])
    axes[0, 1].set_ylabel('Diffusion Coefficient (mÂ²/s)')
    axes[0, 1].set_title('Ion Diffusion Coefficients')
    axes[0, 1].grid(True, alpha=0.3)

# 3. Environmental parameter effects
axes[1, 0].text(0.5, 0.5, 'Environmental\nParameter Analysis\n(see comprehensive_report.md)', 
                ha='center', va='center', transform=axes[1, 0].transAxes, fontsize=12)
axes[1, 0].set_title('Environmental Effects')

# 4. Spatial distribution
axes[1, 1].text(0.5, 0.5, 'Spatial Distribution\nAnalysis\n(1000-cube model)', 
                ha='center', va='center', transform=axes[1, 1].transAxes, fontsize=12)
axes[1, 1].set_title('Spatial Analysis')

plt.tight_layout()
plt.savefig(results_dir / "6gv6_analysis_summary.png", dpi=300, bbox_inches='tight')
plt.show()

print("Visualization saved to: 6gv6_results/6gv6_analysis_summary.png")
